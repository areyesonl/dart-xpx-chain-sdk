// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_local_variable

part of xpx_chain_sdk.buffer;

class MosaicDefinitionTransactionBuffer {
  MosaicDefinitionTransactionBuffer._(this._bc, this._bcOffset);
  factory MosaicDefinitionTransactionBuffer(List<int> bytes) {
    fb.BufferContext rootRef = new fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<MosaicDefinitionTransactionBuffer> reader =
      const _MosaicDefinitionTransactionBufferReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get size => const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 4, 0);
  List<int> get signature => const fb.ListReader<int>(const fb.Uint8Reader())
      .vTableGet(_bc, _bcOffset, 6, null);
  List<int> get signer => const fb.ListReader<int>(const fb.Uint8Reader())
      .vTableGet(_bc, _bcOffset, 8, null);
  int get version => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 10, 0);
  int get type => const fb.Uint16Reader().vTableGet(_bc, _bcOffset, 12, 0);
  List<int> get fee => const fb.ListReader<int>(const fb.Uint32Reader())
      .vTableGet(_bc, _bcOffset, 14, null);
  List<int> get deadline => const fb.ListReader<int>(const fb.Uint32Reader())
      .vTableGet(_bc, _bcOffset, 16, null);
  int get mosaicNonce =>
      const fb.Uint32Reader().vTableGet(_bc, _bcOffset, 18, 0);
  List<int> get mosaicId => const fb.ListReader<int>(const fb.Uint32Reader())
      .vTableGet(_bc, _bcOffset, 20, null);
  int get numOptionalProperties =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 22, 0);
  int get flags => const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 24, 0);
  int get divisibility =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 26, 0);
  int get indicateDuration =>
      const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 28, 0);
  List<int> get duration => const fb.ListReader<int>(const fb.Uint32Reader())
      .vTableGet(_bc, _bcOffset, 30, null);

  @override
  String toString() {
    return 'MosaicDefinitionTransactionBuffer{size: $size, signature: $signature, signer: $signer, version: $version, type: $type, fee: $fee, deadline: $deadline, mosaicNonce: $mosaicNonce, mosaicId: $mosaicId, numOptionalProperties: $numOptionalProperties, flags: $flags, divisibility: $divisibility, indicateDuration: $indicateDuration, duration: $duration}';
  }
}

class _MosaicDefinitionTransactionBufferReader
    extends fb.TableReader<MosaicDefinitionTransactionBuffer> {
  const _MosaicDefinitionTransactionBufferReader();

  @override
  MosaicDefinitionTransactionBuffer createObject(
          fb.BufferContext bc, int offset) =>
      new MosaicDefinitionTransactionBuffer._(bc, offset);
}

class MosaicDefinitionTransactionBufferBuilder {
  MosaicDefinitionTransactionBufferBuilder(this.fbBuilder) {
    assert(fbBuilder != null);
  }

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable();
  }

  int addSize(int size) {
    fbBuilder.addUint32(0, size);
    return fbBuilder.offset;
  }

  int addSignatureOffset(int offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int addSignerOffset(int offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }

  int addVersion(int version) {
    fbBuilder.addUint16(3, version);
    return fbBuilder.offset;
  }

  int addType(int type) {
    fbBuilder.addUint16(4, type);
    return fbBuilder.offset;
  }

  int addFeeOffset(int offset) {
    fbBuilder.addOffset(5, offset);
    return fbBuilder.offset;
  }

  int addDeadlineOffset(int offset) {
    fbBuilder.addOffset(6, offset);
    return fbBuilder.offset;
  }

  int addMosaicNonce(int mosaicNonce) {
    fbBuilder.addUint32(7, mosaicNonce);
    return fbBuilder.offset;
  }

  int addMosaicIdOffset(int offset) {
    fbBuilder.addOffset(8, offset);
    return fbBuilder.offset;
  }

  int addNumOptionalProperties(int numOptionalProperties) {
    fbBuilder.addUint8(9, numOptionalProperties);
    return fbBuilder.offset;
  }

  int addFlags(int flags) {
    fbBuilder.addUint8(10, flags);
    return fbBuilder.offset;
  }

  int addDivisibility(int divisibility) {
    fbBuilder.addUint8(11, divisibility);
    return fbBuilder.offset;
  }

  int addIndicateDuration(int indicateDuration) {
    fbBuilder.addUint8(12, indicateDuration);
    return fbBuilder.offset;
  }

  int addDurationOffset(int offset) {
    fbBuilder.addOffset(13, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class MosaicDefinitionTransactionBufferObjectBuilder extends fb.ObjectBuilder {
  final int _size;
  final List<int> _signature;
  final List<int> _signer;
  final int _version;
  final int _type;
  final List<int> _fee;
  final List<int> _deadline;
  final int _mosaicNonce;
  final List<int> _mosaicId;
  final int _numOptionalProperties;
  final int _flags;
  final int _divisibility;
  final int _indicateDuration;
  final List<int> _duration;

  MosaicDefinitionTransactionBufferObjectBuilder({
    int size,
    List<int> signature,
    List<int> signer,
    int version,
    int type,
    List<int> fee,
    List<int> deadline,
    int mosaicNonce,
    List<int> mosaicId,
    int numOptionalProperties,
    int flags,
    int divisibility,
    int indicateDuration,
    List<int> duration,
  })  : _size = size,
        _signature = signature,
        _signer = signer,
        _version = version,
        _type = type,
        _fee = fee,
        _deadline = deadline,
        _mosaicNonce = mosaicNonce,
        _mosaicId = mosaicId,
        _numOptionalProperties = numOptionalProperties,
        _flags = flags,
        _divisibility = divisibility,
        _indicateDuration = indicateDuration,
        _duration = duration;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    assert(fbBuilder != null);
    final int signatureOffset = _signature?.isNotEmpty == true
        ? fbBuilder.writeListUint8(_signature)
        : null;
    final int signerOffset =
        _signer?.isNotEmpty == true ? fbBuilder.writeListUint8(_signer) : null;
    final int feeOffset =
        _fee?.isNotEmpty == true ? fbBuilder.writeListUint32(_fee) : null;
    final int deadlineOffset = _deadline?.isNotEmpty == true
        ? fbBuilder.writeListUint32(_deadline)
        : null;
    final int mosaicIdOffset = _mosaicId?.isNotEmpty == true
        ? fbBuilder.writeListUint32(_mosaicId)
        : null;
    final int durationOffset = _duration?.isNotEmpty == true
        ? fbBuilder.writeListUint32(_duration)
        : null;

    fbBuilder.startTable();
    fbBuilder.addUint32(0, _size);
    if (signatureOffset != null) {
      fbBuilder.addOffset(1, signatureOffset);
    }
    if (signerOffset != null) {
      fbBuilder.addOffset(2, signerOffset);
    }
    fbBuilder.addUint16(3, _version);
    fbBuilder.addUint16(4, _type);
    if (feeOffset != null) {
      fbBuilder.addOffset(5, feeOffset);
    }
    if (deadlineOffset != null) {
      fbBuilder.addOffset(6, deadlineOffset);
    }
    fbBuilder.addUint32(7, _mosaicNonce);
    if (mosaicIdOffset != null) {
      fbBuilder.addOffset(8, mosaicIdOffset);
    }
    fbBuilder.addUint8(9, _numOptionalProperties);
    fbBuilder.addUint8(10, _flags);
    fbBuilder.addUint8(11, _divisibility);
    fbBuilder.addUint8(12, _indicateDuration);
    if (durationOffset != null) {
      fbBuilder.addOffset(13, durationOffset);
    }
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String fileIdentifier]) {
    fb.Builder fbBuilder = new fb.Builder();
    int offset = finish(fbBuilder);
    return fbBuilder.finish(offset, fileIdentifier);
  }
}
